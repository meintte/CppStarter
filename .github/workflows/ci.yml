name: CI

on:
  workflow_call:
    inputs:
      os:
        default: "ubuntu-latest"
        type: string
      dependencies:
        default: echo "No dependencies"
        type: string
      CPM_SOURCE_CACHE:
        default: ${{ github.workspace }}/cpm_modules
        type: string
      CTEST_OUTPUT_ON_FAILURE:
        default: 1
        type: number
      ENABLE_TEST_COVERAGE:
        default: 1
        type: number
      CMAKE_BUILD_TYPE:
        default: Debug
        type: string
    secrets:
      CODECOV_TOKEN:
        required: true
      CODACY_TOKEN:
        required: true

env:
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  build:
    runs-on: ${{ inputs.os }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: "**/cpm_modules"
          key: ${{ github.workflow }}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}

      - name: install dependencies
        run: |
          pip install gcovr
          ${{ inputs.dependencies }}

      - name: configure
        run: cmake -Sall -Bbuild -DENABLE_TEST_COVERAGE=${{ inputs.ENABLE_TEST_COVERAGE }} -DCMAKE_BUILD_TYPE=${{ inputs.CMAKE_BUILD_TYPE}}

      - name: build
        run: cmake --build build --target GreeterTests -j4

      - name: test
        run: |
          cd build
          ctest --build-config Debug

      - name: collect code coverage
        if: ${{ inputs.ENABLE_TEST_COVERAGE == 1 }}
        run: |
          cmake --build build --target test_coverage -j4
          bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
          export CODACY_PROJECT_TOKEN=${{ secrets.CODACY_TOKEN}}
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r build/test/test_coverage.xml

  install:
    runs-on: ${{ inputs.os }}
    needs: build
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: "**/cpm_modules"
          key: ${{ github.workflow }}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}

      - name: build and install library
        run: |
          pip install gcovr
          cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release
          ${{ (startsWith(inputs.os, 'windows') && 'cmake') || 'sudo cmake' }} --build build --target install
          rm -r -${{ (startsWith(inputs.os, 'windows') && 'Force') || 'f' }} build

      - name: configure test
        run: cmake -Stest -Bbuild -DTEST_INSTALLED_VERSION=1

      - name: build test
        run: cmake --build build --config Debug -j4

      - name: run test
        run: |
          cd build
          ctest --build-config Debug

      # - name: uninstall
      #   run: cmake --build build --target uninstall

  standalone:
    runs-on: ${{ inputs.os }}
    needs: build
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: "**/cpm_modules"
          key: ${{ github.workflow }}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}

      - name: configure
        run: |
          pip install gcovr
          cmake -Sstandalone -Bbuild -DCMAKE_BUILD_TYPE=Debug

      - name: build
        run: cmake --build build -j4

      - name: run
        run: ./build/${{ (startsWith(inputs.os, 'windows') && 'Debug/GreeterMainProject.exe') || 'GreeterMainProject' }}
